# -*- encoding: utf-8 -*-

"""
Copyright (c) 2019 - present AppSeed.us
"""

import pytest
import json
import time
# import app2 as app
from app2 import app

import random
import string

"""
   Sample test data
"""

# TEST CASE #1: current dummy usersname should be able to do it
# TEST CASE #2: allows autogenerated usernames and emails and passwords to be created
DUMMY_USERNAME = "apple"
DUMMY_EMAIL = "apple@apple.com"
DUMMY_PASS = "newpassword"

def generateDummyData():
    # username with 5 characters:
    DUMMY_USERNAME_ = ''.join(random.choices(string.ascii_lowercase, k=5))
    DUMMY_EMAIL_ = DUMMY_USERNAME_ + "@apple.com"
     # password with 11 characters:
    DUMMY_PASS_ = ''.join(random.choices(string.ascii_lowercase, k=11))
    return DUMMY_USERNAME_, DUMMY_EMAIL_, DUMMY_PASS_


@pytest.fixture
def client():
    with app.test_client() as client:
        yield client

    print("setting random here!")



def test_template(client):
    assert "" == ""

def test_sampleGetEndpoint(client):
    response = client.get("/sampleGetEndpoint")
    # print(f"response: {response.data}")
    # print(f"debugged: {response.data.decode('utf8')}")
    data = json.loads(response.data.decode())
    
    assert response.status_code == 200
    assert "hello" in data["msg"]

def test_create_skill(client):
    from random import randint, choices
    value = randint(0, 200)
    descriptionLength = 50
    randomSkillName = f"skill#{value}"
    randomSkillDescription = ''.join(random.choices(string.ascii_uppercase + string.digits, k = descriptionLength))    
    response = client.post("/skill",data=json.dumps(
            {
                "name": randomSkillName,
                "description" : randomSkillDescription
            }
        ),
        content_type="application/json" )
    print(f"response: {response.data}")
    # print(f"debugged: {response.data.decode('utf8')}")
    data = json.loads(response.data.decode())
    
    assert response.status_code == 201
    assert randomSkillName == data["name"]


# happy delete skill test case:
def test_delete_skill(client):
    from random import randint, choices
    value = randint(0, 200)
    descriptionLength = 20
    randomSkillName = f"skill#value"
    randomSkillDescription = ''.join(random.choices(string.ascii_uppercase + string.digits, k = descriptionLength))    
    response = client.post("/skill",data=json.dumps(
            {
                "name": randomSkillName,
                "description" : randomSkillDescription
            }
        ),
        content_type="application/json" )
    print(f"The skill was successfully created: {response.data}")
    data = json.loads(response.data.decode())
    idToDelete = data["id"]


    response = client.delete("/skill", data=json.dumps(
            {
                "id": idToDelete
            }
        ),
        content_type="application/json" )
    print(f"response: {response.data}")
    data = json.loads(response.data.decode())
    print("RESULT:", data)
    assert response.status_code == 201
    assert idToDelete == data["id"]


# negative delete skill test case - duplicate:
def test_delete_skill_negative_1(client):
    from random import randint, choices
    value = randint(0, 200)
    descriptionLength = 20
    randomSkillName = f"skill#value"
    randomSkillDescription = ''.join(random.choices(string.ascii_uppercase + string.digits, k = descriptionLength))    
    response = client.post("/skill",data=json.dumps(
            {
                "name": randomSkillName,
                "description" : randomSkillDescription
            }
        ),
        content_type="application/json" )
    print(f"The skill was successfully created: {response.data}")
    data = json.loads(response.data.decode())
    idToDelete = data["id"]


    initialresponse = client.delete("/skill", data=json.dumps(
            {
                "id": idToDelete
            }
        ),
        content_type="application/json" )
    print(f"response: {initialresponse.data}")

    response = client.delete("/skill", data=json.dumps(
        {
            "id": idToDelete
        }
    ),
    content_type="application/json" )
    print(f"response: {response.data}")

    data = json.loads(response.data.decode())
    print("RESULT:", data)
    assert response.status_code == 400
    assert "Unable to find skill with id" in data["message"]


# negative delete skill test case - duplicate:
def skip_test_delete_skill_negative_2(client):
    from random import randint, choices
    value = randint(0, 200)
    descriptionLength = 20

    # createrole and link with new skill:


    # create skill
    randomSkillName = f"skill#value"
    randomSkillDescription = ''.join(random.choices(string.ascii_uppercase + string.digits, k = descriptionLength))    
    response = client.post("/skill",data=json.dumps(
            {
                "name": randomSkillName,
                "description" : randomSkillDescription
            }
        ),
        content_type="application/json" )
    print(f"The skill was successfully created: {response.data}")
    data = json.loads(response.data.decode())
    idToDelete = data["id"]


    initialresponse = client.delete("/skill", data=json.dumps(
            {
                "id": idToDelete
            }
        ),
        content_type="application/json" )
    print(f"response: {initialresponse.data}")


    # get a role and its associated skills:
    response = client.get("/role", data=json.dumps(
        {
            "id": idToDelete
        }
    ),
    content_type="application/json" )
    print(f"response: {response.data}")

    # assert to check if skill deleted has been removed from role and associated skills: 

    data = json.loads(response.data.decode())
    print("RESULT:", data)
    assert response.status_code == 400
    assert "Unable to find skill with id" in data["message"]




